install.packages('ggplot2')
library('ggplot2')
diamonds
summary(diamonds)
diamonds
diamonds = diamonds
diamonds$price
hist(diamonds$price)
summary(diamonds)
subset(diamonds, diamonds$price < 500)
subset(diamonds, diamonds$price < 250)
subset(diamonds, diamonds$price > 15000)
over1500 <- subset(diamonds, diamonds$price > 15000)
sub500 <- subset(diamonds, diamonds$price < 500)
over1500 <- subset(diamonds, diamonds$price >= 15000)
library('ggplot')
install.packages('ggplot')
library('ggplot')
ggplot()
ggplot(aes(x=age, y=friend_count),data=pf) +
geom_point(alpha=1/20) +
xlim(13,90)
ggplot(aes(x=age, y=friend_count), data=pf) +
geom_point(alpha=1/20) +
xlim(13,90)
ggplot(aes(x=age, y=friend_count), data=pf) + geom_point(alpha=1/20) + xlim(13,90)
library('ggplot2')
ggplot(aes(x=age, y=friend_count), data=pf) + geom_point(alpha=1/20) + xlim(13,90)
friend_count = friend_count
pf = pf
View(pf)
pf <- pf
ggplot(aes(x=age, y=friend_count), data=pf) + geom_point(alpha=1/20) + xlim(13,90)
data(pf)
install.packages('alr3')
library(alr3)
data(Mitchell)
library(alr3)
install.packages('car')
install.packages('pbkrtest')
library(alr3)
install.packages('pbkrtest')
data('diamonds')
package('ggplot2')
impoort('ggplot2')
import('ggplot2')
library('ggplot2')
data('diamonds')
summary(diamonds)
ggplot(aes(carat, price), data=carat) + geom_scatter()
ggplot(aes(carat, price), data=diamonds) + geom_point()
plot1 <- qplot() + ggtitle('Price')
plot2 <- qplot() + ggtitle('Price (log10)')
grid.arrange()
library(gridExtra)
install.packages('gridExtra')
ggplot(aes(carat, price), data=diamonds) + geom_point()
library(gridExtra)
grid.arrange()
plot1 <- qplot(x = price, data = diamonds) + ggtitle('Price')
plot2 <- qplot(x = log10(price), data = diamonds) + ggtitle('Price (log10)')
grid.arrange()
plot1 <- qplot(x = price, data = diamonds, binwidth = 100) + ggtitle('Price')
plot2 <- qplot(x = log10(price), data = diamonds, binwidth = .01) + ggtitle('Price (log10)')
grid.arrange()
grid.arrange(plot1, plot2, ncol=2)
plot2 <- qplot(x = log10(price), data = diamonds, binwidth = .01) + ggtitle('Price (log10)') + scale_x_log10()
grid.arrange(plot1, plot2, ncol=2)
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(aes(alpha = .5, size=.75)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
geom_jitter() +
ggplot(aes(carat, price), data = diamonds) +
geom_jitter() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.5, size-0.75, position = "jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=0.5, size=0.75, position = "jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(scales)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
?scale_color_brewer
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Colorâ€™)
)
)
)
?lm()
exi
exit
stop
()
)))))))))
;
;;;;;;;;
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library('ggplot2')
data('diamonds')
library(gridExtra)
library(scales)
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library(memisc)
install.packages('memisc')
library(memisc)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
header=TRUE, stringsAsFactors=FALSE)
galton <- read.csv("http://blog.yhathq.com/static/misc/galton.csv", header=TRUE, stringsAsFactors=FALSE)
fit <- lm(child ~ parent, data=galton)
fit
install.packages("knitr", dependencies = T)
summary(fit)
fit$residuals
summary(fit)
mtable(m1, m2, m3, m4, m5)
summary(m5)
m5
import('ggplot2')
import('dplyr')
import('knitr')
library('ggplot2')
library('dplyr')
library('knitr')
setwd('~/Desktop/ExploreData')
read.csv('consumption_monthly.csv')
energyData <- read.csv('consumption_monthly.csv')
summary(energyData)
library('ggplot2')
head(energyData)
data(economics)
summary(economics)
library('ggplot2')
head(economics)
data(midwest)
summary(midwest)
head(midwest)
ggplot(aes(x = poptotal), data=midwest) + geom_hist()
ggplot(aes(x = poptotal), data=midwest) + geom_histogram()
ggplot(aes(x = poptotal), data=midwest) + geom_histogram(bins=10)
ggplot(aes(x = poptotal), data=midwest) + geom_histogram(bins=200)
ggplot(aes(x = poptotal), data=midwest) + geom_histogram(bins=200) + scale_x_continuous(limits = c(0, 100000))
ggplot(aes(x = poptotal), data=midwest) + geom_histogram(bins=100) + scale_x_continuous(limits = c(0, 100000))
library('ggplot2')
library('dplyr')
library('knitr')
data(midwest)
summary(midwest)
summary(midwest$percbelowpoverty)
ggplot(aes(poptotal, area), data=midwest) + geom_scatter()
ggplot(aes(poptotal, area), data=midwest) + geom_point()
ggplot(aes(area, poptotal), data=midwest) + geom_point()
largePop <- subset(midwest, poptotal > 5000000)
largeArea <- subset(midwest, area > ,10)
largePop
largeArea$county
largeArea <- subset(midwest, area > ,10)
largeArea <- subset(midwest, area > .10)
largeArea$county
?with
ggplot(aes(area, poptotal), data=with(midwest, poptotal < 5000000)) + geom_point()
ggplot(aes(area, poptotal), data=subset(midwest, poptotal < 5000000)) + geom_point()
ggplot(midwest, aes(poptotal, percpovertyknown)) + geom_point()
ggplot(midwest, aes(percpovertyknown, poptotal)) + geom_point()
ggplot(midwest, aes(percpovertyknown, poptotal)) + geom_point() + scale_x_continuous(limits = c(95, 100))
cor.test(midwest$percpovertyknown, midwest$poptotal)
summary(midwest)
?midwest
C
ggplot(midwest, aes(percollege, percpovertyknown)) + geom_point()
cor.test(midwest$percpovertyknown, midwest$percollege)
midwest <- transform(midwest, totalpercpoverty = percpovertyknown + percbelowpoverty)
summary(midwest$totalpercpoverty)
summary(midwest$percpovertyknown)
summary(midwest$percbelowpoverty)
midwest$totalpercpoverty <- NULL
ggplot(midwest, aes(x=c(popwhite, popblack, popamerindian, popasian))) + geom_bar()
ggplot(midwest, aes(x=c(popwhite, popblack, popamerindian, popasian))) + geom_bar()
ggplot(midwest, aes(x=c(popwhite, popblack, popamerindian, popasian))) + geom_bar()
ggplot(midwest, aes(x=c(popwhite, popblack, popamerindian, popasian))) + geom_bar()
cor.test(midwest$percpovertyknown, midwest$percollege)
ggplot(midwest, aes(percpovertyknown, poptotal)) + geom_point() + scale_x_continuous(limits = c(95, 100))
ggplot(midwest, aes(percpovertyknown, poptotal)) + geom_point() + scale_x_continuous(limits = c(95, 100))
